extends ./shared/_layout.pug
include _mixins

block variables
  - var title = 'Drag13 Dev Blog - JavaScript, Performance, Security'
  - var description = 'Blog about web-programming, performance, security, and some-times - clouds'
  - var keywords = 'programming, web-programming, javascript, performance, security, web-performance, performance-tuning, .net, c#, f#, html, css, drag13'
  - var canonical = 'https://drag13.io/'
  - var img = '~/img/main.png'

block page-styles
  style 
    include:less /styles/landing.less

block content
    h1 Blog about JavaScript, performance and security

    +news(['ukraine', 'react', "learning"], 'All materials for the new course React For Beginners have been published!')
      include:markdown-it(html) ./news/react-free-course-materials.md

    +pp(
      ['typescript', 'typescript-tricks', 'typescript-advanced'],
      'Advanced TypeScript Tips and Tricks - Case Study',
      'It would seem that in 2022 it is a bit too late to talk about TypeScript - the technology is well known and popular. Despite this, some times TypeScript still used half-heartedly. Simple type annotations, null checking and nothing more. Therefore, I brought some interesting, purely practical cases to show mighty TypeScript in action!',
      './posts/typescript-tips-tricks-case-study/index.pug',
      null,
    )

    +news(['ukraine', 'react', "learning"], 'Start working on free React course to support Ukraine')
      include:markdown-it(html) ./news/react-free-course.md

    +pp(
      ['performance', 'react', 'puppeteer', 'slow network', 'slow-cpu'],
      'Performance testing on a slow network and weak CPU using Puppeteer and React',
      'This article shows how to build the script for gathering performance metrics with a slow network or weak CPU using Puppeteer and React. We will also explore cache and cacheless testing to cover the first-time visit and returning scenario. The example might be helpful in case you want to get some insights on how does your site behave on mobile devices that usually are weaker than laptops.',
      './posts/react-performance-puppeteer-limits/index.pug',
      null,
    )

    +pp(
      ['performance', 'react', 'puppeteer', 'webvitals'],
      'Getting performance metrics from React application using Puppeteer',
      'This article will show how to build the script to gather main performance metrics and Core Web Vitals from the React application using Puppeteer and TypeScript. I will also describe how to create and extract custom performance events using the React Profiler component. This example might be helpful if you decide to do some performance research or implement advanced performance testing into your CI/CD pipeline.',
      './posts/react-performance-puppeteer-profile/index.pug',
      null,
    )

    +pp(
      ['FLoC', 'web', 'security', 'privacy'],
      'How to opt-out Federated Learning of Cohorts (FLoC) using JavaScript',
      'Federated Learning of Cohorts (FLoC) - is the new way proposed by Google that allows Chrome to collect and share customer\'s personal information without the need for cookies. This article describes how to opt-out FLoC using JavaScript and why HTTP headers might not be enough.',
       './posts/how-turn-off-floc-javascript/index.pug',
       null,
       '~/img/kdpv/how-to-optout-floc.png',
    )

    +news(['performance', 'webperf'], 'Twitter bot dedicated only to #webperf is here!')
      include:markdown-it(html) ./news/twt-bot.md

    +pp(
      ['typescript', 'typings'],
      'TypeScript Tips and Tricks - Utility Types With Examples',
      'TypeScript is a very powerful language, however, it heavily relies on the types. And sometimes, you may found that you write more types than actual code. In this case, you should take a look into the Utility types that will help you to write fewer types and still keep your code type-safe.',
      './posts/typescript-tricks-utility-examples/index.pug',
      null,
      '~img/kdpv/ts-utility.png'
    )

    +news(['perfrunner', 'performance', 'performance-testing'], 'Hey ho! Perfrunner\'s config file already available with v.0.9! ðŸ¥³')
      include:markdown-it ./news/perfrunner-config.md

    +pp(
      ['typescript', 'typings', 'declarations'],
      'TypeScript Tips and Tricks - Declarations With Examples',
      'TypeScript is a very powerful language and it is becoming more and more popular. It is easy to start but hard to master. In this article I will show you some useful tips and tricks about TypeScript declarations that may help you in everyday coding and will keep your code type-safe.',
      './posts/typescript-tips-tricks-declarations/index.pug',
      null,
      '~img/kdpv/ts-declarations.png'
    )

    +pp(
      ['performance-testing', 'perfrunner', 'first-contentful-paint', 'performance-metrics'],
      'Perfrunner - automated tool to track your website speed changes',
      `A few months ago I worked on the performance improvements for one React-based web application. I tried different tricks to improve initial application loading and I was really annoyed with the way of testing my changes. I had to launch the application several times to get average results. I had to repeat all launches against at least two types of networks (4g and my current). And I must do all mentioned once again for cache and cashless scenarios. So, for the one single change, I must run at least 12 tests. This was not fun.
      I decided that I don\'t want to do this anymore and this is how the Perfrunner appeared.`,
      './posts/perfrunner-intro/index.pug',
      null,
      '~/img/kdpv/perfrunner-intro.jpg'
    )

    +pp(
      ['react','security', 'content-security-policy'],
      'How to use React without unsafe-inline runtime chunk and why',
      'React.JS is an awesome library that widely used all over the world. However, it also contains some pitfalls that might negatively impact your application. And here I want to discuss one of such pitfalls - inlined runtime chunk that might prevent you from correct using one of the most useful security header - Content-Security-Policy.',
      './posts/react-inline-runtimer-chunk/index.pug',
      null,
      '~/img/kdpv/react-security.png'
    )

    +news(['perfrunner', 'performance', 'performance-testing'], 'Hey ho! Perfrunner already in alpha now! ðŸ¥³')
      include:markdown-it ./news/perfrunner-arived.md

    +pp(
      ['typescript', '.d.ts', 'types'],
      'How to add custom types into the TypeScript project',
      'Working with TypeScript is very comfortable. It provides Intellisense, type-checking, and makes the developer\'s life much easier. But, sometimes, when I am using external libraries, I got a problem. They don\t provide types or shipped types that are outdated. In this case, there is no other option but to define custom typings my own. Luckily, it\'s not that hard as you may expect.',
      './posts/custom-typings/index.pug'
      )

    div.next-back
        a.back(href="/page1.pug") Back&gt;&gt;  

